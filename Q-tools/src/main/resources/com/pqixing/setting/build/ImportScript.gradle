//version=1.0,date=2019.02.22
try {
    new Script().runScript(rootDir, gradle)
} catch (Exception e) {
    new File(rootDir, "build/ImportScript.gradle").delete(); throw new RuntimeException(e)
}

/**
 * 导入脚本
 */
class Script {
    final String defaultXmlPath = "templet/project.xml"

    public void runScript(File rootDir, Gradle gradle) {
        File defaultXml = new File(rootDir, defaultXmlPath)
        if (!defaultXml.exists()) return
        def c = new InCludes(rootDir, gradle)
        HashSet<String> includes = c.includes
        def codeRoot = c.codeRoot

        //解析default xml 加载所有的git信息
        Node gitNode = new XmlParser().parse(defaultXml)

        gradle.settingsEvaluated { org.gradle.api.initialization.Settings setting ->
            gitNode.project.each { Node p ->
                String name = p.@name
                String type = p.@type
                def childens = p.submodule
                if (childens.size() > 0) childens.each { Node s ->
                    String s_name = s.@name
                    String s_type = s.@type

                    if (includes.find {
                        it == s_name || it == "${s_name}_api"
                    } != null) addIncludeProject(setting, s_name, new File(rootDir, "$codeRoot/$name/$s_name"), s_type)
                } else if (includes.find {
                    it == name || it == "${name}_api"
                } != null) addIncludeProject(setting, name, new File(rootDir, "$codeRoot/$name"), type)
            }
        }
    }

    void addIncludeProject(org.gradle.api.initialization.Settings setting, String name, File projectDir, String type) {
        setting.include(":$name")
        setting.findProject(":$name").projectDir = projectDir
        if (type == "library_api") {
            setting.include(":${name}_api")
            setting.findProject(":${name}_api").projectDir = new File(projectDir, "src/api")
        }
//        setting.println("include -> project=$name path=$projectDir.absolutePath; type=$type")
    }
}

/**
 * include 配置读取
 */
class InCludes {
    public HashSet<String> includes;
    public String codeRoot;
    private Class clazz = null

    public InCludes(File rootDir, Gradle gradle) {
        String value
        def list = Arrays.asList("include", "codeRoot")
        for (String key : list) {
            try {
                value = System.getProperty(key)
            } catch (Exception e) {
            }
            if (value == null) value = getValue(key, rootDir)
            switch (key) {
                case "include":
                    includes = parseInclude(value.trim(), rootDir, gradle)
                    break
                case "codeRoot":
                    codeRoot = value.isEmpty() ? "src" : value
                    break
                default: gradle.println("not found  -> $value")
            }
        }
        println("Parse include = $includes codeRoot = $codeRoot")
    }

    private HashSet<String> parseInclude(String include, File rootDir, Gradle gradle) {
        def list = new HashSet<String>()
        if (include.isEmpty() || include == "Auto") {//自动抓取工程导入
            for (task in gradle.startParameter.taskNames) {
                def tks = task.split(":")
                if (tks.length < 2) continue
                list.add(tks[tks.length - 2])
            }
            return list
        }
        def values = new LinkedList<String>()
        include.replace("+", ",").split(",").each {
            values.add(it.trim())
        }
        Collections.sort(values, new Comparator<String>() {
            @Override
            int compare(String t, String t1) {
                return (t.contains("#") ? t.substring(0, 1) : "A") <=> (t1.contains("#") ? t1.substring(0, 1) : "A")
            }
        })
        values.each { v ->
            String l = v.trim().replaceAll(".*#", "")
            if (!v.contains("#")) list.add(l)
            else if (v.startsWith("E#")) list.remove(l)
            else if (v.startsWith("D#")) handleDps(list, rootDir, l, true)
            else if (v.startsWith("ED#")) handleDps(list, rootDir, l, false)
        }
        return list
    }

    private void handleDps(HashSet<String> source, File rootDir, String module, boolean add) {
        File d = new File(rootDir, "build/dps/${module}.dp")
        if (add) source.add(module.trim()) else source.remove(module.trim())
        if (!d.exists()) module.println("File no exists -> $d.absolutePath , please excute task DpsAnalysis befor import!!!")
        else {
            d.text.split(",").each { if (add) source.add(it.trim()) else source.remove(it.trim()) }
        }
    }

    private String getValue(String key, File rootDir) {
        try {
            if (clazz == null) clazz = new GroovyClassLoader().parseClass(new File(rootDir, "Config.java"))

            def field = clazz.getField(key)
            field.setAccessible(true)
            return field.get(clazz.newInstance()).toString()
        } catch (Exception e) {
            key.println("Exception -> getValue key = $key ,$e ${clazz.fields.size()}")
            return ""
        }
    }
}
